import socket, select
#유저생성
i = 0;
user_list = []
chatroom_list = []
 # user class
class User:
    userIDPW='';
    userID='';
    loginstate=0;
    chatrnum=0;
    usersock = None;
    def find_id(self):
        for i in range(0,len(self.userIDPW)):
            if(self.userIDPW[i]!=';'):
                self.userID+=self.userIDPW[i];
            else:
                break;
    def __init__(self, IDPW = None):
	    self.userIDPW = IDPW;
    def setsock(self, sockf):
        self.usersock = sockf;
    def login(self,redata,sockfd):
	    if self.userIDPW==redata:
		    self.loginstate=1;
		    self.setsock(sockfd);
		    return 1;
	    else:
		    self.loginstate=0;
		    return 0;
user_list.append(User('ID:user1;PW:12;'))
user_list.append(User('ID:user2;PW:34;'))
user_list.append(User('ID:user3;PW:56;'))
user_list.append(User('ID:user4;PW:78;'))
class Message:
    data=''
class ChattingRoom:
    chating_user_list=[];
    chatrnum=0;
    message_list=[]
    def __init__(self, num = None):
	    self.chatrnum = num;
    def find_user(self, userid):
        for user in self.chatting_user_list:
            if user == userid:
                return True;
            else
                return False;
    def message_s(self,data):
        message_list.append(Message(data,self.chatroomnum))
    def message_join(self,n_sock):
        for t_message in message_list:
            try:
                n_sock.send(t_message)
            except :
                # broken socket connection may be, chat client pressed ctrl+c for example
                n_sock.close()
                CONNECTION_LIST.remove(n_sock)
class Message:
    data=''
    def __init__(self,message,chatrnum):
        temp_user=None
        for temp in user_list:
            if(temp.usersock == sock):
                temp_user = temp.userID
                break
         #save message
         tempms =''
         for temp in range(0,len(message)-1):
             tempms += data[temp]
             if data[temp]==';':
                break
         data = tempms + temp_user + str(chatrnum)       
         self.data = message
         for user in chatroom_list[chatrnum-1].chating_user_list:
             if user.loginstate ==1 and user.chatrnum == chatrnum:
                 user.usersock.send(message)
# Tcp Chat server
#Function to broadcast chat messages to all connected clients
 
if __name__ == "__main__":
     
    # List to keep track of socket descriptors
    CONNECTION_LIST = []
    RECV_BUFFER = 4096 # Advisable to keep it as an exponent of 2
    PORT = 5123
     
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # this has no effect, why ?
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind(("0.0.0.0", PORT))
    server_socket.listen(10)
 
    # Add server socket to the list of readable connections
    CONNECTION_LIST.append(server_socket)
 
    print "Chat server started on port " + str(PORT)
 
    while 1:
        # Get the list sockets which are ready to be read through select
        read_sockets,write_sockets,error_sockets = select.select(CONNECTION_LIST,[],[])
 
        for sock in read_sockets:
            #New connection
            if sock == server_socket:
                # Handle the case in which there is a new connection recieved through server_socket
                sockfd, addr = server_socket.accept()
                CONNECTION_LIST.append(sockfd)
                print "Client (%s, %s) connected" % addr
                 
                broadcast_data(sockfd, "[%s:%s] entered room\n" % addr)
             
            #Some incoming message from a client
            else:
                # Data recieved from client, process it
                try:
                    #In Windows, sometimes when a TCP program closes abruptly,
                    # a "Connection reset by peer" exception will be thrown
                    data = sock.recv(RECV_BUFFER)
                    if data:
                        #login
                        if (data[0]=='I') and (data[1]=='D') and (data[2]==':'):
                            j = False
                            for temp in user_list:
                                if(temp.login(data,sock)==1):
                                    j = True
                                    sock.send('LG:SUCCESS;')
                                    chatroomsize=0;
                                    for chat in chatroom_list:
                                        if chat.find_user(temp.userID):
                                            chatroomsize++;
                                    #send chatting room number
                                        try:
                                            sock.send('CH:'+str(chatroomsize));
                                        except :
                                         # broken socket connection may be, chat client pressed ctrl+c for example
                                            sock.close()
                                            CONNECTION_LIST.remove(sock)  
                                    for chat in chatroom_list:
                                        if chat.find_user(temp.userID):
                                            try:
                                                sock.send('CN:'+str(chat.chatrnum));
                                            except :
                                            # broken socket connection may be, chat client pressed ctrl+c for example
                                                sock.close()
                                                CONNECTION_LIST.remove(sock)  
                                    break;
                            if (j == False):
                                sock.send('LG:FAIL;')
                        #create_chattingroom
                        else if (data[0]=='C')and(data[1]=='C')and(data[2]==':'):
                            i++
                            chatroom_list.append(ChattingRoom(i))
                            for temp in user_list:
                                if(temp.usersock == sock):
                                    user_temp = temp
                            user_temp.chatrnum = i
                            temp_data = ''
                            for ap in range(3,len(data)-1):
                                temp_data[ap-3] = data[ap]
                            for ap in range(1,int(temp_data)):
                                data = sock.recv(RECV_BUFFER)
                                for bp in range(3,len(data)-1):
                                    temp_data[bp-3] = data[bp]
                                    for users in user_list:
				                        if users.userIDPW == temp_data:
                                            chatroom_list[i-1].chating_user_list.append(temp_data)
                                            break

                        else if (data[0]=='M')and(data[1]=='S')and(data[2]==':'):
                            tempms =''
                            j=None
                            for temp in range(3,len(data)):
                                if data[temp]==';':
                                    j = temp
                                    break
                            for temp in range(j+1,len(data)-1):
                                tempms += data[temp]
                            j = int(tempms)
                            chatroom_list[j-1].message_s(data)
                            
                                
                        #out chatroom
                        else if (data[0]=='O')and(data[1]=='U')and(data[2]=='T'):
                            for temp in user_list:
                                if(temp.usersock == sock):
                                    chatroomsize=0;
                                    for chat in chatroom_list:
                                        if chat.find_user(temp.userID):
                                            chatroomsize++;
                                    #send chatting room number
                                        try: 
                                            sock.send('CH:'+str(chatroomsize));
                                        except :
                                         # broken socket connection may be, chat client pressed ctrl+c for example
                                            sock.close()
                                            CONNECTION_LIST.remove(sock)  
                                    for chat in chatroom_list:
                                        if chat.find_user(temp.userID):
                                            try:
                                                sock.send('CN:'+str(chat.chatrnum));
                                            except :
                                                # broken socket connection may be, chat client pressed ctrl+c for example
                                                sock.close()
                                                CONNECTION_LIST.remove(sock)  
                        else if (data[0]=='C')and(data[1]=='H')and(data[2]==':'):
                            temp_data=''
                            for ap in range(3,len(data)-1):
                                temp_data += data[ap]
                            chat_num = int(temp_data)
                            for temp in user_list:
                                if(temp.usersock == sock):
                                    user_temp = temp
                            user_temp.chatrnum = chat_num
                            chatroom_list[chat_num-1].message_join(sock)
                            
                        else if (data[0]=='L')and(data[1]=='G')and(data[2]==':'):
                        broadcast_data(sock, "\r" + '<' + str(sock.getpeername()) + '> ' + data)               
                 
                except:
                    sock.close()
                    CONNECTION_LIST.remove(sock)
                    continue
     
    server_socket.close()
