import socket, select
# user class
class User:
    userIDPW='';
    loginstate=0;
    chatrnum=0;
    useraddr = None;
    def setaddr(self, t_addr):
        self.useraddr = t_addr;
    def login(self,redata,tt_addr):
	    if self.userIDPW==redata:
		    self.loginstate=1;
		    self.setaddr(tt_addr);
		    return 1;
	    else:
		    self.loginstate=0;
		    return 0;
    def __init__(self, IDPW = None):
	    self.userIDPW = IDPW;
    
class ChattingRoom:
    chating_user_list=[];
    chatrnum=0;
    def __init__(self, num = None):
	    self.chatrnum = num;

#유저생성
i = 1;
user_list = []
chatroom_list = []
user_list.append(User('ID:user1;PW:12;'))
user_list.append(User('ID:user2;PW:34;'))
user_list.append(User('ID:user3;PW:56;'))
user_list.append(User('ID:user4;PW:78;'))

# Tcp Chat server
#Function to broadcast chat messages to all connected clients
def broadcast_data (sock, message):
    #Do not send the message to master socket and the client who has send us the message
    for socket in CONNECTION_LIST:
        if socket != server_socket and socket != sock :
            try :
                socket.send(message)
            except :
                # broken socket connection may be, chat client pressed ctrl+c for example
                socket.close()
                CONNECTION_LIST.remove(socket)
 
if __name__ == "__main__":
     
    # List to keep track of socket descriptors
    CONNECTION_LIST = []
    RECV_BUFFER = 4096 # Advisable to keep it as an exponent of 2
    PORT = 9999
     
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # this has no effect, why ?
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind(("localhost", PORT))
    server_socket.listen(10)
 
    # Add server socket to the list of readable connections
    CONNECTION_LIST.append(server_socket)
 
    print "Chat server started on port " + str(PORT)
 
    while 1:
        # Get the list sockets which are ready to be read through select
        read_sockets,write_sockets,error_sockets = select.select(CONNECTION_LIST,[],[])
 
        for sock in read_sockets:
            #New connection
            if sock == server_socket:
                # Handle the case in which there is a new connection recieved through server_socket
                sockfd, addr = server_socket.accept()
                CONNECTION_LIST.append(sockfd)
                print "Client (%s, %s) connected" % addr
                 
                broadcast_data(sockfd, "[%s:%s] entered room\n" % addr)
             
            #Some incoming message from a client
            else:
                # Data recieved from client, process it
                try:
                    #In Windows, sometimes when a TCP program closes abruptly,
                    # a "Connection reset by peer" exception will be thrown
                    #login
                    data = sock.recv(RECV_BUFFER)
                    if data:
                        if (data[0]=='I') and (data[1]=='D') and (data[2]==':'):
                            j = False
                            for temp in user_list:
                                if(temp.login(data,addr)==1):
                                    j = True
                                    sock.send('LG:SUCCESS;')
                                    break;
                            if (j == False):
                                sock.send('LG:FAIL;')

                        else if (data[0]=='C')and(data[1]=='C')and(data[2]==':'):
                            
                        else if (data[0]=='C')and(data[1]=='H')and(data[2]==':'):
                        else if (data[0]=='M')and(data[1]=='S')and(data[2]==':'):
                        else if (data[0]=='O')and(data[1]=='U')and(data[2]=='T'):
                            for temp in user_list:
                                if(temp.useraddr == addr):
                                    
                        else if (data[0]=='L')and(data[1]=='G')and(data[2]==':'):
                        broadcast_data(sock, "\r" + '<' + str(sock.getpeername()) + '> ' + data)               
                 
                except:
                    broadcast_data(sock, "Client (%s, %s) is offline" % addr)
                    print "Client (%s, %s) is offline" % addr
                    sock.close()
                    CONNECTION_LIST.remove(sock)
                    continue
     
    server_socket.close()
